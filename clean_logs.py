#!/usr/bin/env python3
import argparse, re, linecache
from sections import PrimarySection, MiniSection

p_description = 'Clean kubecost-bug-report files.'
parser = argparse.ArgumentParser(description=p_description)
parser.add_argument('bug_report_file', type=str, help='.txt file generated by Kubecost')
args = parser.parse_args()

ACTIVE_LOG_FILTERS = [
  # remove timestamps
  # TODO: re-add timestamps (it's here for de-dedupe)
  "^[A-Z][0-9]{4}.{0,25}",

  # end outside window span
  "^.*(node|disk) '.{0,50}' end outside window.*$",

  # success logs
  "^.*ETL: (Asset|Allocation): Save: successfully saved.*$",
  "^.*ETL: (Asset|Allocation)\[1(h|d)\]: run.* completed.*$",
  "^.*ETL: (Asset|Allocation): updated resource totals.*$",
  "^.*ETL: (Asset|Allocation)\[1(h|d)\]: Query.*$",
  "^.*ETL: (Asset|Allocation)\[1(h|d)\]: SummaryQuery.*$",
  "^.*ComputeCostData\: Processing Query Data$",

  # info logs
  "^.*Spot Pricing Refresh scheduled in [0-9]+\.[0-9]+ minutes\.$",
  "^.*Alert Configs Changed. Writing Updated Config to disk.$",
]

bug_report = None
primary_sections=[]
mini_sections=[]
with open(args.bug_report_file) as bug_report_file:
  bug_report = bug_report_file.readlines()
  # find all sections seperations
  for num, line in enumerate(bug_report, 1):
    if PrimarySection.SEPERATOR in line:
      if bug_report[num + 1] == PrimarySection.SEPERATOR:
        new_section = PrimarySection(num, bug_report[num])
        if len(primary_sections) > 0:
          primary_sections[-1].line_num_end = new_section.line_num_start - 1
        primary_sections.append(new_section)
    if MiniSection.SEPERATOR in line:
      if bug_report[num + 1] == MiniSection.SEPERATOR:
        new_section = MiniSection(num, bug_report[num])
        if len(mini_sections) > 0:
          mini_sections[-1].line_num_end = new_section.line_num_start - 1
        mini_sections.append(new_section)

for i, s in enumerate(mini_sections):
  # print cost-model section to .txt
  if s.section_id == 'cost-model':
    with open('cost-model.txt', 'w') as f:
      for log in s.getLogs():
        f.write('%s' % log)
